<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.30 -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<rfc category="std" docName="draft-ietf-dnsop-nsec-aggressiveuse-08"
     ipr="trust200902" updates="4035">
  <front>
    <title abbrev="NSEC/NSEC3 usage">Aggressive use of DNSSEC-validated cache</title>

    <author fullname="Kazunori Fujiwara" initials="K." surname="Fujiwara">
      <organization abbrev="JPRS">Japan Registry Services Co.,
      Ltd.</organization>

      <address>
        <postal>
          <street>Chiyoda First Bldg. East 13F, 3-8-1 Nishi-Kanda</street>

          <city>Chiyoda-ku, Tokyo</city>

          <code>101-0065</code>

          <country>Japan</country>
        </postal>

        <phone>+81 3 5215 8451</phone>

        <email>fujiwara@jprs.co.jp</email>
      </address>
    </author>

    <author fullname="Akira Kato" initials="A." surname="Kato">
      <organization abbrev="Keio/WIDE">Keio University/WIDE
      Project</organization>

      <address>
        <postal>
          <street>Graduate School of Media Design, 4-1-1 Hiyoshi</street>

          <city>Kohoku</city>

          <region>Yokohama</region>

          <code>223-8526</code>

          <country>Japan</country>
        </postal>

        <phone>+81 45 564 2490</phone>

        <email>kato@wide.ad.jp</email>
      </address>
    </author>

    <author fullname="Warren Kumari" initials="W." surname="Kumari">
      <organization>Google</organization>

      <address>
        <postal>
          <street>1600 Amphitheatre Parkway</street>

          <city>Mountain View, CA</city>

          <code>94043</code>

          <country>US</country>
        </postal>

        <email>warren@kumari.net</email>
      </address>
    </author>

    <date day="13" month="December" year="2016"/>

    <area>operations</area>

    <keyword>Internet-Draft</keyword>

    <abstract>
      <t>The DNS relies upon caching to scale; however, the cache lookup
      generally requires an exact match. This document specifies the use of
      NSEC/NSEC3 resource records to allow DNSSEC validating resolvers to
      generate negative answers within a range, and positive answers from
      wildcards. This increases performance / decreases latency, decreases
      resource utilization on both authoritative and recursive servers, and
      also increases privacy. It may also help increase resilience to certain
      DoS attacks in some circumstances.</t>

      <t>This document updates RFC4035 by allowing validating resolvers to
      generate negative answers based upon NSEC/NSEC3 records (and positive
      answers in the presence of wildcards).</t>

      <t>[ Ed note: Text inside square brackets ([]) is additional background
      information, answers to frequently asked questions, general musings,
      etc. They will be removed before publication.This document is being
      collaborated on in Github at:
      https://github.com/wkumari/draft-ietf-dnsop-nsec-aggressiveuse. The most
      recent version of the document, open issues, etc should all be available
      here. The authors (gratefully) accept pull requests.]</t>
    </abstract>
  </front>

  <middle>
    <section anchor="introduction" title="Introduction">
      <t>A DNS negative cache exists, and is used to cache the fact that an
      RRset does not exist. This method of negative caching requires exact
      matching; this leads to unnecessary additional lookups, increases
      latency, leads to extra resource utilization on both authoritative and
      recursive servers, and decreases privacy by leaking queries.</t>

      <t>This document updates RFC 4035 to allow recursive resolvers to use
      NSEC/NSEC3 resource records to synthesize negative answers from the
      information they have in the cache. This allows validating resolvers to
      respond with a negative answer immediately if the name in question falls
      into a range expressed by a NSEC/NSEC3 resource record already in the
      cache. It also allows the synthesis of positive answers in the presence
      of wildcard records.</t>

      <t>Aggressive Negative Caching was first proposed in Section 6 of DNSSEC
      Lookaside Validation (DLV) <xref target="RFC5074"/> in order to find
      covering NSEC records efficiently.</t>

      <t><xref target="RFC8020"/>, and <xref
      target="I-D.vixie-dnsext-resimprove"/> proposes first steps to using
      NXDOMAIN information for more effective caching. This takes this
      technique further.</t>
    </section>

    <section anchor="terminology" title="Terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in RFC 2119 <xref
      target="RFC2119"/>.</t>

      <t>Many of the specialized terms used in this document are defined in
      DNS Terminology <xref target="RFC7719"/>.</t>

      <t>The key words "Source of Synthesis" in this document are to be
      interpreted as described in <xref target="RFC4592"/>.</t>
    </section>

    <section anchor="problem-statement" title="Problem Statement">
      <t>The DNS negative cache caches negative (non-existent) information,
      and requires an exact match in most instances <xref
      target="RFC2308"/>.</t>

      <t>Assume that the (DNSSEC signed) "example.com" zone contains:</t>

      <t><figure>
          <artwork><![CDATA[albatross.example.com IN A 192.0.2.1
elephant.example.com  IN A 192.0.2.2
zebra.example.com     IN A 192.0.2.3]]></artwork>
        </figure></t>

      <t>If a validating resolver receives a query for cat.example.com, it
      contacts its resolver (which may be itself) to query the example.com
      servers and will get back an NSEC record stating that there are no
      records (alphabetically) between albatross and elephant, or an NSEC3
      record stating there is nothing between two hashed names. The resolver
      then knows that cat.example.com does not exist; however, it does not use
      the fact that the proof covers a range (albatross to elephant) to
      suppress queries for other labels that fall within this range. This
      means that if the validating resolver gets a query for ball.example.com
      (or dog.example.com) it will once again go off and query the example.com
      servers for these names.</t>

      <t>Apart from wasting bandwidth, this also wastes resources on the
      recursive server (it needs to keep state for outstanding queries),
      wastes resources on the authoritative server (it has to answer
      additional questions), increases latency (the end user has to wait
      longer than necessary to get back an NXDOMAIN answer), can be used by
      attackers to cause a DoS (see additional resources), and also has
      privacy implications (e.g: typos leak out further than necessary).</t>

      <t>Another example: assume that the (DNSSEC signed) "example.org" zone
      contains:</t>

      <t><figure>
          <artwork><![CDATA[avocado.example.org   IN A 192.0.2.1
*.example.org         IN A 192.0.2.2
zucchini.example.org IN A 192.0.2.3]]></artwork>
        </figure></t>

      <t>If a query is received for leek.example.org, it contacts its resolver
      (which may be itself) to query the example.org servers and will get back
      an NSEC record stating that there are no records (alphabetically)
      between avocado and zucchini (or an NSEC3 record stating there is
      nothing between two hashed names), as well as an answer for
      leek.example.org, with the label count of the signature set to two (see
      <xref target="RFC7129"/>, section 5.3 for more details).</t>

      <t>If the validating resolver gets a query for banana.example.org it
      will once again go off and query the example.org servers for
      banana.example.org (even though it already has proof that there is a
      wildcard record) - just like above, this has privacy implications,
      wastes resources, can be used to contribute to a DoS, etc.</t>
    </section>

    <section title="Background">
      <t>DNSSEC <xref target="RFC4035"/> and <xref target="RFC5155"/> both
      provide "authenticated denial of existence"; this is a cryptographic
      proof that the queried for name does not exist or type does not exist.
      Proof that a name does not exist is accomplished by providing a (DNSSEC
      secured) record containing the names which appear alphabetically before
      and after the queried for name. In the first example above, if the
      (DNSSEC validating) recursive server were to query for dog.example.com
      it would receive a (signed) NSEC record stating that there are no labels
      between "albatross" and "elephant" (or, for NSEC3, a similar pair of
      hashed names). This is a signed, cryptographic proof that these names
      are the ones before and after the queried for label. As dog.example.com
      falls within this range, the recursive server knows that dog.example.com
      really does not exist. Proof that a type does not exist is accomplished
      by providing a (DNSSEC secured) record containing the queried for name,
      and a type bitmap which does not include the requested type.</t>

      <t>This document specifies that this NSEC/NSEC3 record should be used to
      generate negative answers for any queries that the validating server
      receives that fall within the range covered by the record (for the TTL
      for the record). This document also specifies that a positive answer
      should be generated for any queries that the validating server receives
      that are proven to be covered by a wildcard record.</t>

      <t><xref target="RFC4035">Section 4.5 of</xref> says:</t>

      <t>"In theory, a resolver could use wildcards or NSEC RRs to generate
      positive and negative responses (respectively) until the TTL or
      signatures on the records in question expire. However, it seems prudent
      for resolvers to avoid blocking new authoritative data or synthesizing
      new data on their own. Resolvers that follow this recommendation will
      have a more consistent view of the namespace." and "The reason for these
      recommendations is that, between the initial query and the expiration of
      the data from the cache, the authoritative data might have been changed
      (for example, via dynamic update).". In other words, if a resolver
      generates negative answers from an NSEC record, it will not send any
      queries for names within that NSEC range (for the TTL). If a new name is
      added to the zone during this interval the resolver will not know this.
      Similarly, if the resolver is generating responses from a wildcard
      record, it will continue to do so (for the TTL).</t>

      <t>We believe this recommendation can be relaxed because, in the absence
      of this technique, a lookup for the exact name could have come in during
      this interval, and so a negative answer could already be cached (see
      <xref target="RFC2308"/> for more background). This means that zone
      operators should have no expectation that an added name would work
      immediately. With DNSSEC and Aggressive NSEC, the TTL of the NSEC/NSEC3
      record and the SOA.MINIMUM field are the authoritative statement of how
      quickly a name can start working within a zone.</t>
    </section>

    <section anchor="aggressive-negative-caching"
             title="Aggressive use of Cache">
      <t>This document relaxes the restriction given in Section 4.5 of
      <xref target="RFC4035"/>, see Section 7 for more detail.</t>

      <t>If the negative cache of the validating resolver has sufficient
      information to validate the query, the resolver SHOULD use NSEC, NSEC3
      and wildcard records aggressively. Otherwise, it MUST fall back to send
      the query to the authoritative DNS servers.</t>

      <section anchor="nsec" title="NSEC">
        <t>The validating resolver needs to check the existence of an NSEC RR
        matching/covering the source of synthesis and an NSEC RR covering the
        query name.</t>

        <t>If denial of existence can be determined according to the rules set
        out in <xref target="RFC4035">Section 5.4 of</xref>, using NSEC
        records in the cache, then the resolver can immediately return an
        NXDOMAIN or NODATA (as appropriate) response.</t>
      </section>

      <section anchor="nsec3" title="NSEC3">
        <t>NSEC3 aggressive negative caching is more difficult than NSEC
        aggressive caching. If the zone is signed with NSEC3, the validating
        resolver needs to check the existence of non-terminals and wildcards
        which derive from query names.</t>

        <t>If denial of existence can be determined according to the rules set
        out in <xref target="RFC5155"/> Sections 8.4, 8.5, 8.6, 8.7, using
        NSEC3 records in the cache, then the resolver can immediately return
        an NXDOMAIN or NODATA response (as appropriate).</t>

        <t>If a covering NSEC3 RR has Opt-Out flag, the covering NSEC3 RR does
        not prove the non-existence of the domain name and the aggressive
        negative caching is not possible for the domain name.</t>
      </section>

      <section title="Wildcards">
        <t>The last paragraph of <xref target="RFC4035"/> Section 4.5 also
        discusses the use of wildcards and NSEC RRs to generate positive
        responses and recommends that it not be relied upon. Just like the
        case for the aggressive use of NSEC/NSEC3 for negative answers, we
        revise this recommendation.</t>

        <t>As long as the validating resolver can determine that a name would
        not exist without the wildcard match, determined according to the
        rules set out in <xref target="RFC4035">Section 5.3.4 of</xref>
        (NSEC), or in <xref target="RFC5155">Section 8.8 of</xref>, it SHOULD
        synthesize an answer (or NODATA response) for that name using the
        cached deduced wildcard. If the corresponding wildcard record is not
        in the cache, it MUST fall back to send the query to the authoritative
        DNS servers.</t>
      </section>

      <section anchor="consideration-on-ttl" title="Consideration on TTL">
        <t>The TTL value of negative information is especially important,
        because newly added domain names cannot be used while the negative
        information is effective.</t>

        <t><xref target="RFC2308">Section 5 of</xref> states that the maximum
        number of negative cache TTL value is 3 hours (10800). It is
        RECOMMENDED that validating resolvers limit the maximum effective TTL
        value of negative responses (NSEC/NSEC3 RRs) to this same value.</t>

        <t>Section 5 of <xref target="RFC2308"/> also states that a negative
        cache entry TTL is taken from the minimum of the SOA.MINIMUM field and
        SOA's TTL. This can be less than the TTL of an NSEC or NSEC3 record,
        since their TTL is equal to the SOA.MINIMUM field (see <xref
        target="RFC4035"/>section 2.3 and <xref target="RFC5155"/> section
        3.)</t>

        <t>A resolver that supports aggressive use of NSEC and NSEC3 SHOULD
        reduce the TTL of NSEC and NSEC3 records to match the SOA.MINIMUM
        field in the authority section of a negative response, if SOA.MINIMUM
        is smaller.</t>
      </section>
    </section>

    <section title="Benefits">
      <t>The techniques described in this document provide a number of
      benefits, including (in no specific order):<list style="hanging">
          <t hangText="Reduced latency:">By answering directly from cache,
          validating resolvers can immediately inform clients that the name
          they are looking for does not exist, improving the user
          experience.</t>

          <t hangText="Decreased recursive server load:">By answering queries
          from the cache by synthesizing answers, validating servers avoid
          having to send a query and wait for a response. In addition to
          decreasing the bandwidth used, it also means that the server does
          not need to allocate and maintain state, thereby decreasing memory
          and CPU load.</t>

          <t hangText="Decreased authoritative server load:">Because recursive
          servers can answer queries without asking the authoritative server,
          the authoritative servers receive fewer queries. This decreases the
          authoritative server bandwidth, queries per second and CPU
          utilization.</t>
        </list></t>

      <t>The scale of the benefit depends upon multiple factors, including the
      query distribution. For example, at the time of this writing, around 65%
      of queries to Root Name servers result in NXDOMAIN responses (see
      statistics from <xref target="root-servers.org"/>); this technique will
      eliminate a sizable quantity of these.</t>

      <t>The technique described in this document may also mitigate so-called
      "random QNAME attacks", in which attackers send many queries for random
      sub-domains to resolvers. As the resolver will not have the answers
      cached, it has to ask external servers for each random query, leading to
      a DoS on the authoritative servers (and often resolvers). Aggressive
      NSEC may help mitigate these attacks by allowing the resolver to answer
      directly from cache for any random queries which fall within already
      requested ranges. It will not always work as an effective defense, not
      least because not many zones are DNSSEC signed at all -- but it will
      still provide an additional layer of defense.</t>

      <t>As these benefits are only accrued by those using DNSSEC, it is hoped
      that these techniques will lead to more DNSSEC deployment.</t>
    </section>

    <section anchor="update" title="Update to RFC 4035">
      <t>Section 4.5 of <xref target="RFC4035"/> shows that "In theory, a
      resolver could use wildcards or NSEC RRs to generate positive and
      negative responses (respectively) until the TTL or signatures on the
      records in question expire. However, it seems prudent for resolvers to
      avoid blocking new authoritative data or synthesizing new data on their
      own. Resolvers that follow this recommendation will have a more
      consistent view of the namespace".</t>

      <t>The paragraph is updated as follows:</t>

      <figure>
        <artwork><![CDATA[
+-----------------------------------------------------------------+
|  Once the records are validated, DNSSEC enabled validating      |
|  resolvers SHOULD use wildcards and NSEC/NSEC3 resource records |
|  to generate positive and negative responses until the          |
|  effective TTLs or signatures for those records expire.         |
+-----------------------------------------------------------------+
]]></artwork>
      </figure>
    </section>

    <section anchor="ianacons" title="IANA Considerations">
      <t>This document has no IANA actions.</t>
    </section>

    <section anchor="securitycons" title="Security Considerations">
      <t>Use of NSEC / NSEC3 resource records without DNSSEC validation may
      create serious security issues, and so this technique requires DNSSEC
      validation.</t>

      <t>Newly registered resource records may not be used immediately.
      However, choosing suitable TTL value and negative cache TTL value (SOA
      MINIMUM field) will mitigate the delay concern, and it is not a security
      problem.</t>

      <t>It is also suggested to limit the maximum TTL value of NSEC / NSEC3
      resource records in the negative cache to, for example, 10800 seconds
      (3hrs), to mitigate this issue.</t>

      <t>Although the TTL of NSEC/NSEC3 records is typically fairly short
      (minutes or hours), their RRSIG expiration time can be much further in
      the future (weeks). An attacker who is able to successfully spoof
      responses might poison a cache with old NSEC/NSEC3 records. If the
      resolver is NOT making aggressive use of NSEC/NSEC3, the attacker has to
      repeat the attack for every query. If the resolver IS making aggressive
      use of NSEC/NSEC3, one successful attack would be able to suppress many
      queries for new names, up to the negative TTL.</t>
    </section>

    <section anchor="implementation-status" title="Implementation Status">
      <t>[ Editor note: RFC Editor, please remove this entire section. RFC6982
      says: "Since this information is necessarily time dependent, it is
      inappropriate for inclusion in a published RFC." ]</t>

      <t>Unbound currently implements aggressive negative caching, as does
      Google Public DNS.</t>
    </section>

    <section anchor="acknowledgments" title="Acknowledgments">
      <t>The authors gratefully acknowledge DLV <xref target="RFC5074"/>
      author Samuel Weiler and the Unbound developers.</t>

      <t>Thanks to Mark Andrews for providing the helpful notes for
      implementors provided in Appendix B.</t>

      <t>The authors would like to specifically thank Stephane Bortzmeyer (for
      standing next to and helping edit), Ralph Dolmans, Tony Finch, Tatuya
      JINMEI for extensive review and comments, and also Mark Andrews, Casey
      Deccio, Alexander Dupuy, Olafur Gudmundsson, Bob Harold, Shumon Huque,
      John Levine, Pieter Lexis, Matthijs Mekking (who even sent pull
      requests!) and Ondrej Sury. Mark Andrews also provided the helpful notes
      for implementors
      (https://www.ietf.org/mail-archive/web/dnsop/current/msg18332.html)
      which we made into Appendix B.</t>

      <section anchor="change-history" title="Change History">
        <t>RFC Editor: Please remove this section prior to publication.</t>

        <t>-05 to -06:<list style="symbols">
            <t>Moved some dangling text around - when the examples were added
            some text added in the wrong place.</t>

            <t>There were some bits which mentioned "negative" in the
            title.</t>

            <t>We had the cut-and-paste of what changed in 4035 twice.</t>

            <t>Clarified that this also allows NODATA responses to be
            synthesized.</t>
          </list></t>

        <t>-04 to -05:<list style="symbols">
            <t>Bob pointed out that I did a stupid - when I added the wildcard
            to 'example.com' I made the example wrong / confusing. I have
            attempted to fix this by adding a second example zone
            (example.org) with the wildcard instead.</t>

            <t>More helpful changes (in a pull request, thanks!) from
            Matthijs</t>

            <t>Included Mark Andrew's useful explanation of how to tell ENT
            from NXD as an Appendix.</t>
          </list></t>

        <t>-03 to -04:<list style="symbols">
            <t>Working group does want the "positive" answers, not just
            negative ones. This requires reading what used to be Section 7,
            and a bunch of cleanup, including:<list style="symbols">
                <t>Additional text in the Problem Statement</t>

                <t>Added a wildcard record to the zone.</t>

                <t>Added "or positive answers from wildcards" type text (where
                appropriate) to explain that this isn't just for negative
                answers.</t>

                <t>Reworded much of the Wildcard text.</t>
              </list></t>

            <t>Incorporated pull request from Tony Finch (thanks!):
            https://github.com/wkumari/draft-ietf-dnsop-nsec-aggressiveuse/pull/1</t>

            <t>More fixups from Tony (including text):
            https://www.ietf.org/mail-archive/web/dnsop/current/msg18271.html.
            This included much clearer text on TTL, references to the NSEC /
            NSEC3 RFCs (instead of my clumsy summary), good text on replays,
            etc.</t>

            <t>Converted the "zone file" to a figure to make it more
            readable.</t>

            <t>Text from Tim W: "If a validating resolver receives a query for
            cat.example.com, it contacts its resolver (which may be itself) to
            query..." - which satisfies Jinmei's concern (which I was too
            dense to grock).</t>

            <t>Fixup of the "validation required" in security
            considerations.</t>
          </list></t>

        <t>-02 to -03:<list style="symbols">
            <t>Integrated a bunch of comments from Matthijs Mekking - details
            in:
            https://github.com/wkumari/draft-ietf-dnsop-nsec-aggressiveuse/pull/1.
            I decided to keep "Aggressive Negative Caching" instead of
            "Aggressive USE OF Negative Caching" for readability.</t>

            <t>Attempted to address Bob Harold's comment on the readability
            issues with "But, it will be more effective when both are
            enabled..." in Section 5.4 -
            https://www.ietf.org/mail-archive/web/dnsop/current/msg17997.html</t>

            <t>MAYs and SHOULD drifted in the text block. Fixed - thanks to
            https://mailarchive.ietf.org/arch/msg/dnsop/2ljmmzxtIMCFMLOZmWcSbTYVOy4</t>

            <t>A number of good edits from Stephane in:
            https://www.ietf.org/mail-archive/web/dnsop/current/msg18109.html</t>

            <t>A bunch more edits from Jinmei, as in:
            https://www.ietf.org/mail-archive/web/dnsop/current/msg18206.html</t>
          </list></t>

        <t>-01 to -02:<list style="symbols">
            <t>Added Section 6 - Benefits (as suggested by Jinmei).</t>

            <t>Removed Appendix B (Jinmei)</t>

            <t>Replaced "full-service" with "validating" (where
            applicable)</t>

            <t>Integrated other comments from Jinmei from
            https://www.ietf.org/mail-archive/web/dnsop/current/msg17875.html</t>

            <t>Integrated comment from co-authors, including re-adding parts
            of Appendix B, terminology, typos.</t>

            <t>Tried to explain under what conditions this may actually
            mitigate attacks.</t>
          </list></t>

        <t>-00 to -01:<list style="symbols">
            <t>Comments from DNSOP meeting in Berlin.</t>

            <t>Changed intended status to Standards Track (updates RFC
            4035)</t>

            <t>Added a section "Updates to RFC 4035"</t>

            <t>Some language clarification / typo / cleanup</t>

            <t>Cleaned up the TTL section a bit.</t>

            <t>Removed Effects section, Additional proposal section, and
            pseudo code.</t>

            <t>Moved "mitigation of random subdomain attacks" to Appendix.</t>
          </list></t>

        <t>From draft-fujiwara-dnsop-nsec-aggressiveuse-03 -&gt;
        draft-ietf-dnsop-nsec-aggressiveuse<list style="symbols">
            <t>Document adopted by DNSOP WG.</t>

            <t>Adoption comments</t>

            <t>Changed main purpose to performance</t>

            <t>Use NSEC3/Wildcard keywords</t>

            <t>Improved wordings (from good comments)</t>

            <t>Simplified pseudo code for NSEC3</t>

            <t>Added Warren as co-author.</t>

            <t>Reworded much of the problem statement</t>

            <t>Reworked examples to better explain the problem / solution.</t>
          </list></t>

        <section anchor="version-draft-fujiwara-dnsop-nsec-aggressiveuse-01"
                 title="Version draft-fujiwara-dnsop-nsec-aggressiveuse-01">
          <t><list style="symbols">
              <t>Added reference to DLV <xref target="RFC5074"/> and imported
              some sentences.</t>

              <t>Added Aggressive Negative Caching Flag idea.</t>

              <t>Added detailed algorithms.</t>
            </list></t>
        </section>

        <section anchor="version-draft-fujiwara-dnsop-nsec-aggressiveuse-02"
                 title="Version draft-fujiwara-dnsop-nsec-aggressiveuse-02">
          <t><list style="symbols">
              <t>Added reference to <xref
              target="I-D.vixie-dnsext-resimprove"/></t>

              <t>Added considerations for the CD bit</t>

              <t>Updated detailed algorithms.</t>

              <t>Moved Aggressive Negative Caching Flag idea into Additional
              Proposals</t>
            </list></t>
        </section>

        <section anchor="version-draft-fujiwara-dnsop-nsec-aggressiveuse-03"
                 title="Version draft-fujiwara-dnsop-nsec-aggressiveuse-03">
          <t><list style="symbols">
              <t>Added "Partial implementation"</t>

              <t>Section 4,5,6 reorganized for better representation</t>

              <t>Added NODATA answer in Section 4</t>

              <t>Trivial updates</t>

              <t>Updated pseudo code</t>
            </list></t>
        </section>
      </section>

      <section title="new section">
        <t/>
      </section>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <reference anchor="RFC2119"
                 target="http://www.rfc-editor.org/info/rfc2119">
        <front>
          <title>Key words for use in RFCs to Indicate Requirement
          Levels</title>

          <author fullname="S. Bradner" initials="S." surname="Bradner">
            <organization/>
          </author>

          <date month="March" year="1997"/>

          <abstract>
            <t>In many standards track documents several words are used to
            signify the requirements in the specification. These words are
            often capitalized. This document defines these words as they
            should be interpreted in IETF documents. This document specifies
            an Internet Best Current Practices for the Internet Community, and
            requests discussion and suggestions for improvements.</t>
          </abstract>
        </front>

        <seriesInfo name="BCP" value="14"/>

        <seriesInfo name="RFC" value="2119"/>

        <seriesInfo name="DOI" value="10.17487/RFC2119"/>
      </reference>

      <reference anchor="RFC2308"
                 target="http://www.rfc-editor.org/info/rfc2308">
        <front>
          <title>Negative Caching of DNS Queries (DNS NCACHE)</title>

          <author fullname="M. Andrews" initials="M." surname="Andrews">
            <organization/>
          </author>

          <date month="March" year="1998"/>

          <abstract>
            <t>RFC1034 provided a description of how to cache negative
            responses. It however had a fundamental flaw in that it did not
            allow a name server to hand out those cached responses to other
            resolvers, thereby greatly reducing the effect of the caching.
            This document addresses issues raise in the light of experience
            and replaces RFC1034 Section 4.3.4. [STANDARDS-TRACK]</t>
          </abstract>
        </front>

        <seriesInfo name="RFC" value="2308"/>

        <seriesInfo name="DOI" value="10.17487/RFC2308"/>
      </reference>

      <reference anchor="RFC4035"
                 target="http://www.rfc-editor.org/info/rfc4035">
        <front>
          <title>Protocol Modifications for the DNS Security
          Extensions</title>

          <author fullname="R. Arends" initials="R." surname="Arends">
            <organization/>
          </author>

          <author fullname="R. Austein" initials="R." surname="Austein">
            <organization/>
          </author>

          <author fullname="M. Larson" initials="M." surname="Larson">
            <organization/>
          </author>

          <author fullname="D. Massey" initials="D." surname="Massey">
            <organization/>
          </author>

          <author fullname="S. Rose" initials="S." surname="Rose">
            <organization/>
          </author>

          <date month="March" year="2005"/>

          <abstract>
            <t>This document is part of a family of documents that describe
            the DNS Security Extensions (DNSSEC). The DNS Security Extensions
            are a collection of new resource records and protocol
            modifications that add data origin authentication and data
            integrity to the DNS. This document describes the DNSSEC protocol
            modifications. This document defines the concept of a signed zone,
            along with the requirements for serving and resolving by using
            DNSSEC. These techniques allow a security-aware resolver to
            authenticate both DNS resource records and authoritative DNS error
            indications.</t>

            <t>This document obsoletes RFC 2535 and incorporates changes from
            all updates to RFC 2535. [STANDARDS-TRACK]</t>
          </abstract>
        </front>

        <seriesInfo name="RFC" value="4035"/>

        <seriesInfo name="DOI" value="10.17487/RFC4035"/>
      </reference>

      <reference anchor="RFC4592"
                 target="http://www.rfc-editor.org/info/rfc4592">
        <front>
          <title>The Role of Wildcards in the Domain Name System</title>

          <author fullname="E. Lewis" initials="E." surname="Lewis">
            <organization/>
          </author>

          <date month="July" year="2006"/>

          <abstract>
            <t>This is an update to the wildcard definition of RFC 1034. The
            interaction with wildcards and CNAME is changed, an error
            condition is removed, and the words defining some concepts central
            to wildcards are changed. The overall goal is not to change
            wildcards, but to refine the definition of RFC 1034.
            [STANDARDS-TRACK]</t>
          </abstract>
        </front>

        <seriesInfo name="RFC" value="4592"/>

        <seriesInfo name="DOI" value="10.17487/RFC4592"/>
      </reference>

      <reference anchor="RFC5155"
                 target="http://www.rfc-editor.org/info/rfc5155">
        <front>
          <title>DNS Security (DNSSEC) Hashed Authenticated Denial of
          Existence</title>

          <author fullname="B. Laurie" initials="B." surname="Laurie">
            <organization/>
          </author>

          <author fullname="G. Sisson" initials="G." surname="Sisson">
            <organization/>
          </author>

          <author fullname="R. Arends" initials="R." surname="Arends">
            <organization/>
          </author>

          <author fullname="D. Blacka" initials="D." surname="Blacka">
            <organization/>
          </author>

          <date month="March" year="2008"/>

          <abstract>
            <t>The Domain Name System Security (DNSSEC) Extensions introduced
            the NSEC resource record (RR) for authenticated denial of
            existence. This document introduces an alternative resource
            record, NSEC3, which similarly provides authenticated denial of
            existence. However, it also provides measures against zone
            enumeration and permits gradual expansion of delegation-centric
            zones. [STANDARDS-TRACK]</t>
          </abstract>
        </front>

        <seriesInfo name="RFC" value="5155"/>

        <seriesInfo name="DOI" value="10.17487/RFC5155"/>
      </reference>

      <reference anchor="RFC5074"
                 target="http://www.rfc-editor.org/info/rfc5074">
        <front>
          <title>DNSSEC Lookaside Validation (DLV)</title>

          <author fullname="S. Weiler" initials="S." surname="Weiler">
            <organization/>
          </author>

          <date month="November" year="2007"/>

          <abstract>
            <t>DNSSEC Lookaside Validation (DLV) is a mechanism for publishing
            DNS Security (DNSSEC) trust anchors outside of the DNS delegation
            chain. It allows validating resolvers to validate DNSSEC-signed
            data from zones whose ancestors either aren't signed or don't
            publish Delegation Signer (DS) records for their children. This
            memo provides information for the Internet community.</t>
          </abstract>
        </front>

        <seriesInfo name="RFC" value="5074"/>

        <seriesInfo name="DOI" value="10.17487/RFC5074"/>
      </reference>

      <reference anchor="RFC7719"
                 target="http://www.rfc-editor.org/info/rfc7719">
        <front>
          <title>DNS Terminology</title>

          <author fullname="P. Hoffman" initials="P." surname="Hoffman">
            <organization/>
          </author>

          <author fullname="A. Sullivan" initials="A." surname="Sullivan">
            <organization/>
          </author>

          <author fullname="K. Fujiwara" initials="K." surname="Fujiwara">
            <organization/>
          </author>

          <date month="December" year="2015"/>

          <abstract>
            <t>The DNS is defined in literally dozens of different RFCs. The
            terminology used by implementers and developers of DNS protocols,
            and by operators of DNS systems, has sometimes changed in the
            decades since the DNS was first defined. This document gives
            current definitions for many of the terms used in the DNS in a
            single document.</t>
          </abstract>
        </front>

        <seriesInfo name="RFC" value="7719"/>

        <seriesInfo name="DOI" value="10.17487/RFC7719"/>
      </reference>

      <?rfc include='reference.RFC.7129'?>
    </references>

    <references title="Informative References">
      <reference anchor="I-D.vixie-dnsext-resimprove">
        <front>
          <title>Improvements to DNS Resolvers for Resiliency, Robustness, and
          Responsiveness</title>

          <author fullname="Paul Vixie" initials="P" surname="Vixie">
            <organization/>
          </author>

          <author fullname="Rodney Joffe" initials="R" surname="Joffe">
            <organization/>
          </author>

          <author fullname="Frederico Neves" initials="F" surname="Neves">
            <organization/>
          </author>

          <date day="23" month="June" year="2010"/>

          <abstract>
            <t>This document describes several mechanisms which can be
            employed by iterative caching DNS resolvers to improve resiliency,
            robustness, and responsiveness. These improvements are optional
            and they require no changes to the protocol, or to authority
            servers, or to DNS stub resolver clients.</t>
          </abstract>
        </front>

        <seriesInfo name="Internet-Draft"
                    value="draft-vixie-dnsext-resimprove-00"/>

        <format target="http://www.ietf.org/internet-drafts/draft-vixie-dnsext-resimprove-00.txt"
                type="TXT"/>
      </reference>

      <?rfc include='reference.RFC.8020'?>

      <reference anchor="root-servers.org"
                 target="http://www.root-servers.org/">
        <front>
          <title abbrev="Autonomous System (AS) Number">Root Server Technical
          Operations Assn</title>

          <author>
            <organization>IANA</organization>
          </author>

          <date/>
        </front>
      </reference>
    </references>

    <section anchor="detailed-implementation-idea"
             title="Detailed implementation notes">
      <t><list style="symbols">
          <t>Previously, cached negative responses were indexed by QNAME,
          QCLASS, QTYPE, and the setting of the CD bit (see RFC 4035, Section
          4.7), and only queries matching the index key would be answered from
          the cache. With aggressive negative caching, the validator, in
          addition to checking to see if the answer is in its cache before
          sending a query, checks to see whether any cached and validated NSEC
          record denies the existence of the sought record(s). Using
          aggressive negative caching, a validator will not make queries for
          any name covered by a cached and validated NSEC record. Furthermore,
          a validator answering queries from clients will synthesize a
          negative answer (or NODATA response) whenever it has an applicable
          validated NSEC in its cache unless the CD bit was set on the
          incoming query. (Imported from Section 6 of <xref
          target="RFC5074"/>).</t>

          <t>Implementing aggressive negative caching suggests that a
          validator will need to build an ordered data structure of NSEC and
          NSEC3 records for each signer domain name of NSEC / NSEC3 records in
          order to efficiently find covering NSEC / NSEC3 records. Call the
          table as NSEC_TABLE. (Imported from Section 6.1 of <xref
          target="RFC5074"/> and expanded.)</t>

          <t>The aggressive negative caching may be inserted at the cache
          lookup part of the recursive resolvers.</t>

          <t>If errors happen in aggressive negative caching algorithm,
          resolvers MUST fall back to resolve the query as usual. "Resolve the
          query as usual" means that the resolver must process the query as
          though it does not implement aggressive negative caching.</t>
        </list></t>
    </section>

    <section title="Procedure for determining ENT vs NXDOMAN with NSEC">
      <t>This procedure outlines how to determine if a given name does not
      exist, or is an ENT (Empty Non-Terminal, see <xref target="RFC5155"/>
      Section 1.3) with NSEC.</t>

      <t>If the NSEC record has not been verified as secure discard it.</t>

      <t>If the given name sorts before or matches the NSEC owner name discard
      it as it does not prove the NXDOMAIN or ENT.</t>

      <t>If the given name is a subdomain of the NSEC owner name and the NS
      bit is present and the SOA bit is absent then discard the NSEC as it is
      from a parent zone.</t>

      <t>If the next domain name sorts after the NSEC owner name and the given
      name sorts after or matches next domain name then discard the NSEC
      record as it does not prove the NXDOMAIN or ENT.</t>

      <t>If the next domain name sorts before or matches the NSEC owner name
      and the given name is not a subdomain of the next domain name then
      discard the NSEC as it does not prove the NXDOMAIN or ENT.</t>

      <t>You now have a NSEC record that proves the NXDOMAIN or ENT.</t>

      <t>If the next domain name is a subdomain of the given name you have a
      ENT otherwise you have a NXDOMAIN.</t>
    </section>
  </back>
</rfc>
